using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.OleDb;
using System.Globalization;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace DataGrid1
{
    public partial class Form1 : Form
    {
        string ConnectSrting1 = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=";
        private string filename;
        public static string ConnectString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Demianka2017.mdb;";
        public double defaultspeed = 80; // км/ч
        SpeedrestrictionComparer sc = new SpeedrestrictionComparer(); 
        List<PointOnTrack> data = new List<PointOnTrack>(); // список точек на пути из базы
        List<PointOnTrack> datastation = new List<PointOnTrack>();// список точек на пути из базы, принадлежащих станциям
        List <PointOnTrack> datakm = new List<PointOnTrack>();// список точек километровых столбов, стрелок и тупиков
        List<PointOnTrack> dataspeed = new List<PointOnTrack>();// точки ограничений скорости уже имеющихся  в базе
        List<SpeedRestriction> data1 = new List<SpeedRestriction>(); // список speedrestrictions
        List<Segment> Segments = new List<Segment>();
        List<Track> tracks = new List<Track>();
        public string errormessage = ""; 
        
        private OleDbConnection myConnection;
        public Form1()
        {
            InitializeComponent();

            dataGridView1.Columns[0].HeaderText = "Станция / перегон";
            dataGridView1.Columns[1].HeaderText = "Segment ID";
            dataGridView1.Columns[2].HeaderText = "нач КМ";
            dataGridView1.Columns[3].HeaderText = "нач ПК";
            dataGridView1.Columns[4].HeaderText = "нач М";
            dataGridView1.Columns[5].HeaderText = "кон КМ";
            dataGridView1.Columns[6].HeaderText = "кон ПК";
            dataGridView1.Columns[7].HeaderText = "кон М";
            dataGridView1.Columns[8].HeaderText = "V км/ч";
            dataGridView1.Columns[9].HeaderText = "Только головой";
            dataGridView1.Columns[10].HeaderText = "Для порожнего поезда";

        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (myConnection != null)
            myConnection.Close();
        }
        // кнопка проверить
        private void LoadButton_Click(object sender, EventArgs e)
        {
            if ((myConnection != null) && (data1.Count() > 0))
            {
                foreach (SpeedRestriction s in data1)
                {
                    s.Start.CheckCoordinate(Segments);
                    s.End.CheckCoordinate(Segments);
                }
            }
        }


        // Кнопка загрузить
        private void LoadTest2_Click(object sender, EventArgs e)
        {


            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                if (myConnection != null)
                    myConnection.Close();


                data.Clear();
                data1.Clear();
                Segments.Clear();
                datastation.Clear();
                datakm.Clear();
                tracks.Clear();
                dataspeed.Clear();
                dataGridView1.Rows.Clear();


                filename = openFileDialog1.FileName;
                ConnectString = ConnectSrting1 + filename + ";";
                LoadDataGrid2();

               //var tokens = filename.Split('\');

                Form1.ActiveForm.Text = "Автозаполнение постоянных ограничений сорости - " + filename;


            }
        }

        // Explicit predicate delegate.
        // предикат для поиска точки на пути принадлежащей к станции
        private static bool Findstation(PointOnTrack ptk)
        {
            if (ptk.DicPointOnTrackKindID == 8 ||
                ptk.DicPointOnTrackKindID == 27 ||
                ptk.DicPointOnTrackKindID == 28 ||
                ptk.DicPointOnTrackKindID == 29)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //предикат для поиска точек на пути км столбов и стрелок
        private static bool Findkm(PointOnTrack ptk)
        {
            if (ptk.DicPointOnTrackKindID == 0 ||
                ptk.DicPointOnTrackKindID == 27 ||
                ptk.DicPointOnTrackKindID == 28 ||
                ptk.DicPointOnTrackKindID == 29)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        //предикат для поиска точек на пути постоянных ограничений скоростей
        private static bool Findspeed(PointOnTrack ptk)
        {
            if (ptk.DicPointOnTrackKindID == 2)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        // функция для кнопки Загрузить
        public void LoadDataGrid2()
        {


            myConnection = new OleDbConnection(ConnectString);
            myConnection.Open();


            string query2 =
                "SELECT P.DicPointOnTrackKindID, P.TrackObjectID, P.SegmentID, " +
                "P.PointOnTrackCoordinate, P.PointOnTrackKm, P.PointOnTrackPk, P.PointOnTrackM, " +
                "P.PointOnTrackUsageDirection, PS.PredefinedRouteSegmentFromStartToEnd, " +
                "iif(ST.StationName is null, iif(STDE.StationName is null, STCP.StationName, STDE.StationName), ST.StationName) AS Station " +
                "FROM (((((((PointOnTrack AS P " +
                "LEFT JOIN TrackObject AS [TO] ON P.TrackObjectID = TO.TrackObjectID) " +
                "LEFT JOIN Station AS[ST] ON TO.TrackObjectID = ST.TrackObjectID) " +
                "LEFT JOIN CrossingPiece AS CP ON TO.TrackObjectID = CP.TrackObjectID) " +
                "LEFT JOIN Station AS STCP ON CP.StationID = STCP.TrackObjectID) " +
                "LEFT JOIN DeadEnd AS DE ON TO.TrackObjectID = DE.TrackObjectID) " +
                "LEFT JOIN Station AS STDE ON DE.StationID = STDE.TrackObjectID) " +
                "LEFT JOIN PredefinedRouteSegment AS [PS] ON P.SegmentID = PS.SegmentID) " +
                "LEFT JOIN Segment AS S ON PS.SegmentID = S.SegmentID " +
                "WHERE (P.DicPointOnTrackKindID In (0,2,8,27,28,29) " +
                "AND P.SegmentID IN (SELECT SegmentID FROM PredefinedRouteSegment)) " +
                "ORDER BY PS.SegmentID, P.PointOntrackCoordinate* PS.PredefinedRouteSegmentFromStartToEnd + S.SegmentLength * ((PS.PredefinedRouteSegmentFromStartToEnd - 1) / (0 - 2))";


            OleDbCommand command = new OleDbCommand(query2, myConnection);
            OleDbDataReader reader = command.ExecuteReader();

            // выбираем точки на пути из базы
            while (reader.Read())
            {
                data.Add(new PointOnTrack(
                    Convert.ToDouble(reader[0]),
                    Convert.ToDouble(reader[1]),
                    Convert.ToDouble(reader[2]),
                    Convert.ToDouble(reader[3]),
                    reader[4].ToString(),
                    Convert.ToDouble(reader[5]),
                    Convert.ToDouble(reader[6]),
                    Convert.ToDouble(reader[7]),
                    Convert.ToDouble(reader[8]),
                    reader[9].ToString()));
            }
            reader.Close();

            datastation = data.FindAll(Findstation);
            datakm = data.FindAll(Findkm);
            dataspeed = data.FindAll(Findspeed);

             
            // загрузить сегменты из базы

            string query3 =
                "SELECT S.SegmentID, S.SegmentName, S.SegmentLength, S.TrackID, PS.PredefinedRouteSegmentFromStartToEnd " +
                "FROM Segment AS S " +
                "LEFT JOIN PredefinedRouteSegment AS [PS] ON S.SegmentID = PS.SegmentID " +
                "WHERE S.SegmentID IN (SELECT SegmentID FROM PredefinedRouteSegment)";

            OleDbCommand command3 = new OleDbCommand(query3, myConnection);

            OleDbDataReader reader3 = command3.ExecuteReader();

            while (reader3.Read())
            {
                Segments.Add(new Segment(
                    Convert.ToDouble(reader3[0]),
                    reader3[1].ToString(),
                    Convert.ToDouble(reader3[2]),
                    Convert.ToDouble(reader3[3]),
                    Convert.ToDouble(reader3[4])));
            }
            reader3.Close();

            // загрузить пути из базы

            string query4 =
                "SELECT TrackID, TrackNumber, TrackEven, DicTrackKindID, TrackName " +
                "FROM Track ";

            OleDbCommand command4 = new OleDbCommand(query4, myConnection);

            OleDbDataReader reader4 = command4.ExecuteReader();

            while (reader4.Read())
            {
                tracks.Add(new Track(
                    Convert.ToDouble(reader4[0]),
                    reader4[1].ToString(),
                    Convert.ToDouble(reader4[2]),
                    Convert.ToDouble(reader4[3]),
                    reader4[4].ToString()));
            }
            reader4.Close();


            if (dataspeed.Count != 0)
            {
                //MessageBox.Show("В базе уже имеются постоянные ограничения скоростей ", "Автозаполнение скоростей", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                label1.Text = "В базе уже есть постоянные ограничения скоростей ";

                // заполняем список ограничений скоростей из базы

                string query6 =
                "SELECT TrackObjectID, PermanentRestrictionSpeed, PermRestrictionOnlyHeader, PermRestrictionForEmptyTrain " +
                "FROM PermanentRestriction ";
                OleDbCommand command6 = new OleDbCommand(query6, myConnection);

                OleDbDataReader reader6 = command6.ExecuteReader();

                while (reader6.Read())
                {
                    data1.Add(new SpeedRestriction(
                        Convert.ToDouble(reader6[1]),
                        Convert.ToDouble(reader6[2]),
                        Convert.ToDouble(reader6[3]))
                    );
                    data1[data1.Count - 1].Start.TrackObjectID = Convert.ToDouble(reader6[0]);
                    data1[data1.Count - 1].End.TrackObjectID = Convert.ToDouble(reader6[0]);
                }
                reader6.Close();


                foreach (SpeedRestriction s in data1)
                {
                    // находим точки соответствующие началу и концу ограничения
                    int index = dataspeed.FindIndex(x => (x.TrackObjectID == s.Start.TrackObjectID) &&
                    (x.PointOnTrackUsageDirection*x.PredefinedRouteSegmentFromStartToEnd == 1));

                    s.Start = new PointOnTrack(dataspeed[index]);

                    int index2 = dataspeed.FindIndex(x => (x.TrackObjectID == s.End.TrackObjectID) &&
                    (x.PointOnTrackUsageDirection * x.PredefinedRouteSegmentFromStartToEnd == -1));

                    s.End = new PointOnTrack(dataspeed[index2]);

                    s.RefreshStationMid(datastation);

                    //s.Start.CheckCoordinate(Segments);
                    //s.End.CheckCoordinate(Segments);

                }

                data1.Sort(sc);
               
            }
            else
            {

                // заполняем список ограничений скоростей по отобранным точкам на пути границ станций,стрелок и тупиков
                for (int i = 1; i < datastation.Count; i++)
                {

                    if (datastation[i - 1].SegmentID == datastation[i].SegmentID)
                    {

                        PointOnTrack start = new PointOnTrack(datastation[i - 1]);
                        //start.PointOnTrackUsageDirection = 1;
                        PointOnTrack end = new PointOnTrack(datastation[i]);
                        //start.PointOnTrackUsageDirection = -1;

                        data1.Add(new SpeedRestriction(start, end, defaultspeed));

                        if (start.station == end.station)
                        {
                            data1[data1.Count - 1].station = start.station.ToUpper();
                        }
                        else
                        {
                            data1[data1.Count - 1].station = start.station.ToUpper() + " - " + end.station.ToUpper();
                        }
                    }

                }
                label1.Text = "Загруженны координаты границ станций, стрелок и тупиков";
            }

            // заполняем dataGrid View
            FillDataGrid();

        }




        // внести ограничения скоростей в базу данных
        private void TestButton3_Click(object sender, EventArgs e)
        {

            //удалить ограничения скорости из базы
            if (dataspeed.Count > 0)
            {
                string query7 = "DELETE " +
                    "FROM PermanentRestriction ";
                    
                string query71 = "DELETE FROM TrackObject " +
                    "WHERE DicTrackObjectKindID = 8 ";

                string query72 = "DELETE FROM PointOnTrack " +
                    "WHERE DicPointOnTrackKindID = 2 ";
                OleDbCommand command7 = new OleDbCommand(query7, myConnection);
                OleDbCommand command71 = new OleDbCommand(query71, myConnection);
                OleDbCommand command72 = new OleDbCommand(query72, myConnection);

                command7.ExecuteNonQuery();
                command71.ExecuteNonQuery();
                command72.ExecuteNonQuery();
            }

            // внести величины скоростей из таблицы datagridview1 в список ограничений скоростей
            //valueschange();

            if ((myConnection != null) && (data1.Count() > 0))
            {
                //найти наибольший TrackObjectId
                string query1 = "SELECT MAX(TrackObjectID) FROM TrackObject";
                OleDbCommand command1 = new OleDbCommand(query1, myConnection);
                OleDbDataReader reader = command1.ExecuteReader();
                reader.Read();
                double TrackObjectID = Convert.ToDouble(reader[0]);
                reader.Close();

                //найти наибольший PointOntrackID
                string query3 = "SELECT MAX(PointOnTrackID) FROM PointOnTrack";
                OleDbCommand command3 = new OleDbCommand(query3, myConnection);
                OleDbDataReader reader3 = command3.ExecuteReader();
                reader3.Read();
                double PointOnTrackID = Convert.ToDouble(reader3[0]);
                reader3.Close();

                foreach (SpeedRestriction s in data1)
                {

                    // внести ограничения скорости в таблицу TrackObject
                    TrackObjectID += 1;
                    string TrackObjectName = "огр. " + s.Value + " км/ч на " + s.Start.PointOnTrackKm + " км " + s.Start.PointOnTrackPk + " пк " + s.Start.PointOnTrackM.ToString("G", CultureInfo.InvariantCulture) + " м";

                    string query = "INSERT INTO TrackObject ( TrackObjectID, DicTrackObjectKindID, TrackObjectName) VALUES (" + TrackObjectID + ", 8, '" + TrackObjectName + "' )";
                    OleDbCommand command = new OleDbCommand(query, myConnection);
                    command.ExecuteNonQuery();

                    // внести ограничения скоростей в таблицу PermanentRestriction
                    string query2 = "INSERT INTO PermanentRestriction (TrackObjectID, PermanentRestrictionSpeed, PermRestrictionOnlyHeader, PermRestrictionForEmptyTrain) VALUES ( " + TrackObjectID + ", " + s.Value + ", " + s.PermRestrictionOnlyHeader + ", " + s.PermRestrictionForEmptyTrain + " )";
                    OleDbCommand command2 = new OleDbCommand(query2, myConnection);
                    command2.ExecuteNonQuery();

                    // внести ограничения скоростей в таблицу PointOntrack
                    double PointOnTrackUsageDirection;

                    if (s.Start.PredefinedRouteSegmentFromStartToEnd == 1) // если на этом отрезки возрастает километраж
                    {
                        PointOnTrackID += 1;
                        PointOnTrackUsageDirection = 1;
                        InsertPointOntrack(TrackObjectID, PointOnTrackID, s.Start, PointOnTrackUsageDirection);

                        PointOnTrackID += 1;
                        PointOnTrackUsageDirection = -1;
                        InsertPointOntrack(TrackObjectID, PointOnTrackID, s.End, PointOnTrackUsageDirection);
                    }
                    else
                    {
                        PointOnTrackID += 1;
                        PointOnTrackUsageDirection = 1;
                        InsertPointOntrack(TrackObjectID, PointOnTrackID, s.End, PointOnTrackUsageDirection);

                        PointOnTrackID += 1;
                        PointOnTrackUsageDirection = -1;
                        InsertPointOntrack(TrackObjectID, PointOnTrackID, s.Start, PointOnTrackUsageDirection);
                    }
                }
                MessageBox.Show("Введены ограничения скорости \n всего: " + data1.Count.ToString(), "Автозаполнение скоростей", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);


                // считываем данные из базы заново после сохранения
                data.Clear();
                data1.Clear();
                Segments.Clear();
                datastation.Clear();
                datakm.Clear();
                tracks.Clear();
                dataspeed.Clear();
                dataGridView1.Rows.Clear();

                LoadDataGrid2();

            }

            
        }
        

        private void DefSpeedtextBox1_TextChanged(object sender, EventArgs e)
        {
            defaultspeed = Convert.ToDouble(DefSpeedtextBox1.Text);
        }

        // найти индекс сегмента по SegmentID
        public int SegmentIndexFind(double SegmentID)
        {           
           int index =  Segments.FindIndex((Segment) => Segment.SegmentID == SegmentID);
            return index;
        }

        // ввести в базу точку на пути
        void InsertPointOntrack(double TrackObjectID, double PointOnTrackID, PointOnTrack p, double PointOnTrackUsageDirection)
        {
            string query4 = "INSERT INTO PointOnTrack ( PointOnTrackID, DicPointOnTrackKindID, TrackObjectID, SegmentID, PointOnTrackCoordinate, PointOnTrackKm, PointOnTrackPk, PointOnTrackM, PointOnTrackUsageDirection ) " +
            "VALUES (" + PointOnTrackID + ", 2, " + TrackObjectID + ", " + p.SegmentID + ", " + p.PointOnTrackCoordinate.ToString("G", CultureInfo.InvariantCulture) + ", " + p.PointOnTrackKm + ", " + p.PointOnTrackPk.ToString("G", CultureInfo.InvariantCulture) + ", " + p.PointOnTrackM.ToString("G", CultureInfo.InvariantCulture) + ", " + PointOnTrackUsageDirection.ToString("G", CultureInfo.InvariantCulture) + " )";
            OleDbCommand command4 = new OleDbCommand(query4, myConnection);
            command4.ExecuteNonQuery();
        }


        // заполняем dataGrid View из data1
        private void FillDataGrid()
        {
            foreach (SpeedRestriction s in data1)
            {

                dataGridView1.Rows.Add(
                    s.station,

                    s.Start.SegmentID,
                    //s.TrackToShow(tracks, Segments),

                    s.Start.PointOnTrackKm,
                    s.Start.PointOnTrackPk,
                    s.Start.PointOnTrackM,
                    s.End.PointOnTrackKm,
                    s.End.PointOnTrackPk,
                    s.End.PointOnTrackM,
                    s.Value,
                    s.PermRestrictionOnlyHeader,
                    s.PermRestrictionForEmptyTrain);

            }
        }

        // заполняем значения dataGrid View из data1
        private void RefillDataGrid()
        {
            for (int i = 0; i < data1.Count; i++)
            {
                dataGridView1.Rows[i].Cells[0].Value = data1[i].station;
                dataGridView1.Rows[i].Cells[1].Value = data1[i].Start.SegmentID;
                dataGridView1.Rows[i].Cells[2].Value = data1[i].Start.PointOnTrackKm;
                dataGridView1.Rows[i].Cells[3].Value = data1[i].Start.PointOnTrackPk;
                dataGridView1.Rows[i].Cells[4].Value = data1[i].Start.PointOnTrackM;
                dataGridView1.Rows[i].Cells[5].Value = data1[i].End.PointOnTrackKm;
                dataGridView1.Rows[i].Cells[6].Value = data1[i].End.PointOnTrackPk;
                dataGridView1.Rows[i].Cells[7].Value = data1[i].End.PointOnTrackM;
                dataGridView1.Rows[i].Cells[8].Value = data1[i].Value;
                dataGridView1.Rows[i].Cells[9].Value = data1[i].PermRestrictionOnlyHeader;
                dataGridView1.Rows[i].Cells[10].Value = data1[i].PermRestrictionForEmptyTrain;


            }
        }

        // внести все значения из таблицы datagridview1 в список ограничений скоростей
        private void Refilldata1()
        {
            for (int i = 0; i < data1.Count(); i++)
            {
                data1[i].station = dataGridView1.Rows[i].Cells[0].Value.ToString();
                data1[i].Start.SegmentID = Convert.ToDouble(dataGridView1.Rows[i].Cells[1].Value);
                data1[i].Start.PointOnTrackKm = dataGridView1.Rows[i].Cells[2].Value.ToString();
                data1[i].Start.PointOnTrackPk = Convert.ToDouble(dataGridView1.Rows[i].Cells[3].Value);
                data1[i].Start.PointOnTrackM = Convert.ToDouble(dataGridView1.Rows[i].Cells[4].Value);
                data1[i].End.PointOnTrackKm = dataGridView1.Rows[i].Cells[5].Value.ToString();
                data1[i].End.PointOnTrackPk = Convert.ToDouble(dataGridView1.Rows[i].Cells[6].Value);
                data1[i].End.PointOnTrackM = Convert.ToDouble(dataGridView1.Rows[i].Cells[7].Value);
                data1[i].Value = Convert.ToInt32(dataGridView1.Rows[i].Cells[8].Value);
            }
        }


        // occurs when a mouse clicks on a cell
        private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            ShowCoordinatesLabel();
        }

        private void ShowCoordinatesLabel()
        {
            if (data1.Count() > 0 && (data1.Count() > Convert.ToInt32(dataGridView1.CurrentCell.RowIndex)))
            {
                int Rowindex = Convert.ToInt32(dataGridView1.CurrentCell.RowIndex);
                int SegmentsIndex = SegmentIndexFind(data1[Rowindex].Start.SegmentID);

                if (SegmentsIndex >= 0)
                {
                    label1.Text =
                        "Координаты: " + data1[Rowindex].Start.PointOnTrackCoordinate.ToString() +
                                   " " + data1[Rowindex].End.PointOnTrackCoordinate.ToString() +
                        "  Сегмент: " + Segments[SegmentsIndex].SegmentID.ToString() +
                        "  Путь: " + data1[Rowindex].TrackToShow(tracks, Segments);
                }
                else
                {
                    label1.Text = "Сегмент " + data1[Rowindex].Start.SegmentID.ToString() + " вне маршрута";
                }
            }
        }

        // добавить Speedrestrictoin в data1
        private void addspeedrestriction()
        {
            int Rowindex = Convert.ToInt32(dataGridView1.CurrentCell.RowIndex);

            PointOnTrack start = new PointOnTrack(data1[Rowindex].Start);
            PointOnTrack end = new PointOnTrack(data1[Rowindex].End);

            data1.Add(new SpeedRestriction(start, end, defaultspeed, ""));

            //data1.Add(new SpeedRestriction(data1[Rowindex].Start, data1[Rowindex].End, defaultspeed ));

            data1.Sort(sc);
            dataGridView1.Rows.Add();
            RefillDataGrid();
        }

        private void Addbutton1_Click(object sender, EventArgs e)
        {
            if ((myConnection != null) && (data1.Count() > 0))
                addspeedrestriction();
        }

        private void dataGridView1_RowLeave(object sender, DataGridViewCellEventArgs e)
        {
            //Refilldata1();

            //data1.Sort(sc);
            //RefillDataGrid();
        }


        private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView1.Rows.Count > 0)
            {
                int i = dataGridView1.CurrentCell.RowIndex;
                data1[i].station = dataGridView1.Rows[i].Cells[0].Value.ToString();
                data1[i].Start.SegmentID = Convert.ToDouble(dataGridView1.Rows[i].Cells[1].Value);  // не редактировать сегмент  
                data1[i].End.SegmentID = Convert.ToDouble(dataGridView1.Rows[i].Cells[1].Value);   // не редактировать сегмент  
                data1[i].Start.PointOnTrackKm = dataGridView1.Rows[i].Cells[2].Value.ToString();
                data1[i].Start.PointOnTrackPk = Convert.ToDouble(dataGridView1.Rows[i].Cells[3].Value);
                data1[i].Start.PointOnTrackM = Convert.ToDouble(dataGridView1.Rows[i].Cells[4].Value);
                data1[i].End.PointOnTrackKm = dataGridView1.Rows[i].Cells[5].Value.ToString();
                data1[i].End.PointOnTrackPk = Convert.ToDouble(dataGridView1.Rows[i].Cells[6].Value);
                data1[i].End.PointOnTrackM = Convert.ToDouble(dataGridView1.Rows[i].Cells[7].Value);
                data1[i].Value = Convert.ToInt32(dataGridView1.Rows[i].Cells[8].Value);
                data1[i].PermRestrictionOnlyHeader = Convert.ToDouble(dataGridView1.Rows[i].Cells[9].Value);
                data1[i].PermRestrictionForEmptyTrain = Convert.ToDouble(dataGridView1.Rows[i].Cells[10].Value);

                data1[i].Start.RefreshCoordinate(datakm);
                data1[i].End.RefreshCoordinate(datakm);

                ShowCoordinatesLabel();

            }
        }

        private void Deletebutton1_Click(object sender, EventArgs e)
        {
            if ((myConnection != null) && (data1.Count() > 0))
            { 
            data1.RemoveAt(dataGridView1.CurrentCell.RowIndex);
            dataGridView1.Rows.Remove(dataGridView1.CurrentRow);
            data1.Sort(sc);
            RefillDataGrid();
            }
        }

        private void dataGridView1_RowEnter(object sender, DataGridViewCellEventArgs e)
        {
            //if (dataGridView1.Rows.Count > 0 && data1.Count > 0 && dataGridView1.CurrentRow != null)
            //ShowCoordinatesLabel();
        }
    }


    public class PointOnTrack
    {

        public double DicPointOnTrackKindID;
        public double TrackObjectID;
        public double SegmentID;
        public double PointOnTrackCoordinate;
        public string PointOnTrackKm;
        public double PointOnTrackPk;
        public double PointOnTrackM;
        public double PointOnTrackUsageDirection;
        public double PredefinedRouteSegmentFromStartToEnd;
        public string station = "";

        // конструктор
        public PointOnTrack(double DicPointOnTrackKindID, double TrackObjectID, double SegmentID, double PointOnTrackCoordinate, 
            string PointOnTrackKm, double PointOnTrackPk, double PointOnTrackM, 
            double PointOnTrackUsageDirection, double PredefinedRouteSegmentFromStartToEnd, string station)
        {
            this.DicPointOnTrackKindID = DicPointOnTrackKindID;
            this.TrackObjectID = TrackObjectID;
            this.SegmentID = SegmentID;
            this.PointOnTrackCoordinate = PointOnTrackCoordinate;
            this.PointOnTrackKm = PointOnTrackKm;
            this.PointOnTrackPk = PointOnTrackPk;
            this.PointOnTrackM = PointOnTrackM;
            this.PointOnTrackUsageDirection = PointOnTrackUsageDirection;
            this.PredefinedRouteSegmentFromStartToEnd = PredefinedRouteSegmentFromStartToEnd;
            this.station = station;
        }

        // конструктор
        public PointOnTrack(double DicPointOnTrackKindID, double SegmentID, double PointOnTrackCoordinate,
            string PointOnTrackKm, double PointOnTrackPk, double PointOnTrackM,
            double PointOnTrackUsageDirection, double PredefinedRouteSegmentFromStartToEnd, string station)
        {
            this.DicPointOnTrackKindID = DicPointOnTrackKindID;
            this.SegmentID = SegmentID;
            this.PointOnTrackCoordinate = PointOnTrackCoordinate;
            this.PointOnTrackKm = PointOnTrackKm;
            this.PointOnTrackPk = PointOnTrackPk;
            this.PointOnTrackM = PointOnTrackM;
            this.PointOnTrackUsageDirection = PointOnTrackUsageDirection;
            this.PredefinedRouteSegmentFromStartToEnd = PredefinedRouteSegmentFromStartToEnd;
            this.station = station;
        }

        // конструктор предложенный создать автоматически
        public PointOnTrack()
        {
        }

        public PointOnTrack(PointOnTrack point)
        {
            this.DicPointOnTrackKindID = point.DicPointOnTrackKindID;
            this.SegmentID = point.SegmentID;
            this.PointOnTrackCoordinate = point.PointOnTrackCoordinate;
            this.PointOnTrackKm = point.PointOnTrackKm;
            this.PointOnTrackPk = point.PointOnTrackPk;
            this.PointOnTrackM = point.PointOnTrackM;
            this.PointOnTrackUsageDirection = point.PointOnTrackUsageDirection;
            this.PredefinedRouteSegmentFromStartToEnd = point.PredefinedRouteSegmentFromStartToEnd;
            this.station = point.station;
        }

        // вычислить PointOntrackCoordinate по железнодорожным координатам
        public void RefreshCoordinate(List<PointOnTrack> points)
        {
            string km = PointOnTrackKm;
            double segmentid = SegmentID;
            PointOnTrack p = new PointOnTrack();

            int index = points.FindIndex(x => (x.PointOnTrackKm == km) && (x.SegmentID == segmentid));
            //int index = Segments.FindIndex((Segment) => Segment.SegmentID == SegmentID);

            if (index >= 0)
            { 
            PointOnTrackCoordinate = points[index].PointOnTrackCoordinate
                - (points[index].PointOnTrackPk - 1) * 100 - points[index].PointOnTrackM
                + (PointOnTrackPk - 1) * 100 + PointOnTrackM;
            }
            else
            {
                MessageBox.Show("Некорректный КМ ", "Автозаполнение скоростей", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
            // если координата близка к нулю
            if (PointOnTrackCoordinate < 0.001 && PointOnTrackCoordinate > -0.001)
                PointOnTrackCoordinate = 0;
        }

        // вычислить жд координату по PointOnTrackCoordinate
        public string RefreshKmPkM(List<PointOnTrack> points)
        {
            int index1 = points.FindIndex(x => (x.PointOnTrackCoordinate <= PointOnTrackCoordinate) && (x.SegmentID == SegmentID));
            int index2 = points.FindLastIndex(x => (x.PointOnTrackCoordinate <= PointOnTrackCoordinate) && (x.SegmentID == SegmentID));
            int index;

            if (index1 >= index2)
            {
                index = index1;
            }
            else
            {
                index = index2;
            }

            string Km = points[index].PointOnTrackKm;
            double M = (PointOnTrackCoordinate - points[index].PointOnTrackCoordinate) % 100;
            double Pk = ((PointOnTrackCoordinate - points[index].PointOnTrackCoordinate) - PointOnTrackM) / 100 + 1;

            return PointOnTrackKm + " " + PointOnTrackPk.ToString() + " " + PointOnTrackM.ToString();
        }  


        // проверить, что координаты внутри сегмента
        public void CheckCoordinate(List<Segment> segments)
        {
            int sindex = segments.FindIndex((Segment) => Segment.SegmentID == SegmentID);
            if (PointOnTrackCoordinate > segments[sindex].SegmentLength)
            {
                MessageBox.Show("Координата точки больше длины сегмента \n " +
                    PointOnTrackKm + "км " + PointOnTrackPk.ToString() + "пк " + PointOnTrackM.ToString() + "м\n" +
                   PointOnTrackCoordinate.ToString() + " > " + segments[sindex].SegmentLength.ToString(), 
                   "Автозаполнение скоростей", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }

            if (PointOnTrackCoordinate < 0)
            {
                MessageBox.Show("Отрицательная координата \n" +
                   PointOnTrackKm + "км " + PointOnTrackPk.ToString() + "пк " + PointOnTrackM.ToString() + "м\n" +
                   PointOnTrackCoordinate.ToString() + " ", "Автозаполнение скоростей", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

    }

    public class SpeedRestriction
    {
        public PointOnTrack Start;
        public PointOnTrack End;
        public double Value;
        public string station = "";
        public double PermRestrictionOnlyHeader = 0;
        public double PermRestrictionForEmptyTrain = 0;

        //конструктор
        public SpeedRestriction(PointOnTrack Start, PointOnTrack End, double Value)
        {
            this.Start = Start;
            this.End = End;
            this.Value = Value;
        }

        //конструктор
        public SpeedRestriction(PointOnTrack Start, PointOnTrack End, double Value, string station)
        {
            this.Start = Start;
            this.End = End;
            this.Value = Value;
            this.station = station;
        }

        public SpeedRestriction(double Value, double PermRestrictionOnlyHeader, double PermRestrictionForEmptyTrain)
        {
            this.Start = new PointOnTrack();
            this.End = new PointOnTrack();
            this.Value = Value;
            this.PermRestrictionOnlyHeader = PermRestrictionOnlyHeader;
            this.PermRestrictionForEmptyTrain = PermRestrictionForEmptyTrain;
        }

        public string TrackToShow(List<Track> tracks, List<Segment> segments)
        {
            int sindex = segments.FindIndex((Segment) => Segment.SegmentID == Start.SegmentID);
            int tindex = tracks.FindIndex(x => (x.TrackID == segments[sindex].TrackID));
            string tracktoshow = tracks[tindex].TrackNumber + " " + tracks[tindex].TrackName;

            if ( tracks[tindex].DicTrackKindID == 1)
            {
                //главный путь
                tracktoshow += " гл.";
            }
            else 
            {
                tracktoshow += " бок";
            }

            return tracktoshow;
        }


        // определить по координатам на какой станции находится ограничение скорости
        public void RefreshStationMid(List<PointOnTrack> stationpoints)
        {
            double MidCoordinate = (Start.PointOnTrackCoordinate + End.PointOnTrackCoordinate) / 2;
            int index1;
            int index2;

            if (Start.PredefinedRouteSegmentFromStartToEnd == -1 )
            {
            index1 = stationpoints.FindIndex(y => ((y.PointOnTrackCoordinate <= MidCoordinate) && (y.SegmentID == Start.SegmentID)));
            index2 = stationpoints.FindLastIndex(x => ((x.PointOnTrackCoordinate >= MidCoordinate) && (x.SegmentID == Start.SegmentID)));
            }
            else
            {
                index1 = stationpoints.FindIndex(y => ((y.PointOnTrackCoordinate >= MidCoordinate) && (y.SegmentID == Start.SegmentID)));
                index2 = stationpoints.FindLastIndex(x => ((x.PointOnTrackCoordinate <= MidCoordinate) && (x.SegmentID == Start.SegmentID)));
            }

            if (index1 >= 0 && index2 >= 0)
            {
                if (stationpoints[index1].station == stationpoints[index2].station) // если точка на станции
                {
                    station = stationpoints[index1].station;
                }
                else
                {
                    //if (Start.PredefinedRouteSegmentFromStartToEnd == 1)
                    //{
                    //    station = stationpoints[index1].station + " - " + stationpoints[index2].station;
                    //}
                    //else
                    //{
                        station = stationpoints[index2].station + " - " + stationpoints[index1].station;
                    //}
                }
            }
            else
            {
                station = index1.ToString() + " " + index2.ToString();
                

                MessageBox.Show("Присутствует ошибочное значение PointOnTrackCoordinate  \n " +
                    Start.PointOnTrackCoordinate.ToString() + " " + End.PointOnTrackCoordinate.ToString(),
                    "Автозаполнение скоростей", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }

            
            //station = station.ToUpper();
        }
    }
    

    public class Segment
    {
        public double SegmentID;
        public string SegmentName;
        public double SegmentLength;
        public double TrackID;
        public double PredefinedRouteSegmentFromStartToEnd;

        //конструктор
        public Segment()
        {

        }
        public Segment(
            double SegmentID, 
            string SegmentName, 
            double SegmentLength, 
            double TrackID, 
            double PredefinedRouteSegmentFromStartToEnd)
        {
            this.SegmentID = SegmentID;
            this.SegmentName = SegmentName;
            this.SegmentLength = SegmentLength;
            this.TrackID = TrackID;
            this.PredefinedRouteSegmentFromStartToEnd = PredefinedRouteSegmentFromStartToEnd;
        }
    }

    public class Track
    {
        public double TrackID;
        public string TrackNumber;
        public double TrackEven;
        public double DicTrackKindID;
        public string TrackName;

        public Track(
        double TrackID,
        string TrackNumber,
        double TrackEven,
        double DicTrackKindID,
        string TrackName)
        {
            this.TrackID = TrackID;
            this.TrackNumber = TrackNumber;
            this.TrackEven = TrackEven;
            this.DicTrackKindID = DicTrackKindID;
            this.TrackName = TrackName;
        }

    }

    //сравнение SpeedRestriction по segmentId и сoordinate и длине названия станции
    class SpeedrestrictionComparer : IComparer<SpeedRestriction>
    {
        public int Compare(SpeedRestriction x, SpeedRestriction y)
        {
            int a = Convert.ToInt32(x.Start.SegmentID);
            int b = Convert.ToInt32(y.Start.SegmentID);

            double c = x.Start.PointOnTrackCoordinate;
            double d = y.Start.PointOnTrackCoordinate;
            
            if ( a > b )
            {
                return 1;
            }
            else if ( a < b )
            {
                return -1;
            }
            else if ( a == b )
            {
                    if (c > d)
                    {
                        if (x.Start.PredefinedRouteSegmentFromStartToEnd == 1)
                            return 1;
                        else if (x.Start.PredefinedRouteSegmentFromStartToEnd == -1)
                            return -1;
                    }
                    else if (d > c)
                    {
                        if (x.Start.PredefinedRouteSegmentFromStartToEnd == 1)
                            return -1;
                        else if (x.Start.PredefinedRouteSegmentFromStartToEnd == -1)
                            return 1;
                    }
                else if (c == d)
                {

                    if (x.station.Length > y.station.Length)
                        return -1;
                    else if (x.station.Length < y.station.Length)
                        return 1;
                }
                
            }

            return 0;
            //throw new NotImplementedException();
        }
    }

}
